/*
 * @Author: mrlthf11
 * @LastEditors: mrlthf11
 * @Date: 2021-07-02 23:57:43
 * @LastEditTime: 2021-07-08 08:45:57
 * @Description: file content
 */

import { Buffer } from 'buffer'
import decryptChars from './decryptChars'




function stringToUint8array(string) {
  return new TextEncoder().encode(string)
}

function uint8arrayToString(uint8array) {
  return new TextDecoder().decode(uint8array)
}



function decrypt(src: string) {
  const uint8array = Buffer.from(src, 'base64');
  const numArr = [...uint8array.slice(2)]

  console.log(JSON.stringify(numArr))
  const retArr = decryptChars(numArr)

  const uint8numArr = splitBytes(retArr)
  console.log(JSON.stringify(retArr))
}


function splitArray(arr: number[]) {
  const rst = []
  for (const item of arr) {
    rst.push(item & 255)
    rst.push(item >> 8 & 255)
    rst.push(item >> 16 & 255)
    rst.push(item >> 24 & 255)
  }
  return new Uint8Array(rst)
}



// console.log(JSON.stringify( decryptChars([137,40,66,199,249,53,193,221,192,205,243,222,10,47,195,124,87,197,113,14,97,51,234,170,20,38,142,114,239,102,193,105,43,187,237,174,129,85,114,68,160,34,230,28,157,96,181,83,186,141,53,7,197,211,85,206,81,81,162,250,116,37,83,57,228,86,11,218,105,207,219,129,212,28,131,134,58,202,137,72,243,3,48,48,176,26,200,21,28,45,43,5,56,85,132,8,172,84,124,2,116,200,149,98,78,9,242,166,14,187,194,17,145,49,138,27,153,37,216,23,138,178,185,247,254,175,42,48,119,119,237,161,182,17,24,182,44,5,218,225,225,133,14,164,209,47,58,24,150,12,125,124,78,60,67,66,194,31,56,180,208,69,183,252,97,63,94,61,163,113,192,44,116,15,84,198,114,29,253,54,34,50,11,55,194,60,227,2,199,140,231,70,48,106,192,102,9,214,33,122,250,60,181,235,118,241,16,134,106,20,112,209,7,3,244,58,61,209,104,39,51,49,88,20,29,168,32,186,21,87,96,209,217,123,125,83,37,197,168,81,66,163,47,227,153,113,48,13,137,115,11,137,0,220,159,48,227,224,193,168,187,229,250,89,14,50,114,207,170,140,186,55,35,224,95,217,107,141,37,207,143,238,2,244,119,1,246,20,214,227,76,125,131,193,29,138,124,104,135,212,245,102,94,244,195,216,130,31,110,130,30,230,92,49,157,232,104,152,237,197,0,58,58,159,74,219,58,2,196,232,140,52,132,161,33,83,225,98,58,115,250,192,94,99,254,72,107,63,21,74,98,121,154,122,211,185,248,168,172,0,151,178,202,73,233,48,251,105,202,86,73,147,60,155,202,47,251,204,81,49,54,6,210,131,157,30,184,176,105,154,198,186,236,119,12,233,75,104,196,7,249,229,85,132,88,99,95,250,145,72,87,58,121,57,47,75,99,201,145,206,65,8,80,104,95,140,165,94,146,177,174,254,135,105,216,119,187,180,194,41,54,115,132,154,216,15,133,231,172,65,218,8,148,208,136,88,26,74,46,175,224,30,31,198,112,59,1,117,215,205,78,63,118,50,136,167,219,50,131,75,35,40,105,81,116,65,15,179])))


decrypt('AACJKELH+TXB3cDN894KL8N8V8VxDmEz6qoUJo5y72bBaSu77a6BVXJEoCLmHJ1gtVO6jTUHxdNVzlFRovp0JVM55FYL2mnP24HUHIOGOsqJSPMDMDCwGsgVHC0rBThVhAisVHwCdMiVYk4J8qYOu8IRkTGKG5kl2BeKsrn3/q8qMHd37aG2ERi2LAXa4eGFDqTRLzoYlgx9fE48Q0LCHzi00EW3/GE/Xj2jccAsdA9UxnId/TYiMgs3wjzjAseM50YwasBmCdYhevo8tet28RCGahRw0QcD9Do90WgnMzFYFB2oILoVV2DR2Xt9UyXFqFFCoy/jmXEwDYlzC4kA3J8w4+DBqLvl+lkOMnLPqoy6NyPgX9lrjSXPj+4C9HcB9hTW40x9g8Edinxoh9T1Zl70w9iCH26CHuZcMZ3oaJjtxQA6Op9K2zoCxOiMNIShIVPhYjpz+sBeY/5Iaz8VSmJ5mnrTufiorACXsspJ6TD7acpWSZM8m8ov+8xRMTYG0oOdHriwaZrGuux3DOlLaMQH+eVVhFhjX/qRSFc6eTkvS2PJkc5BCFBoX4ylXpKxrv6Hadh3u7TCKTZzhJrYD4XnrEHaCJTQiFgaSi6v4B4fxnA7AXXXzU4/djKIp9syg0sjKGlRdEEPsw==')
